import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add_horse => "Add horse";
  String get black => "black";
  String get breedname => "Breedname";
  String get breedname_expl => "The name used in breeding";
  String get brown => "brown";
  String get by => "by";
  String get cancel => "cancel";
  String get chestnut => "chestnut";
  String get close => "close";
  String get color => "Color";
  String get dateOfBirth => "Date of Birth";
  String get delete_horse => "delete this horse";
  String get events => "Events";
  String get finish => "finish";
  String get gelding => "Gelding";
  String get gender => "Gender";
  String get grey => "grey";
  String get hannoveranian => "Hannoveranian";
  String get holsteinian => "Holsteinian";
  String get input_names => "What is the name of the Horse?";
  String get mare => "Mare";
  String get my_horses => "My Horses";
  String get name => "Name";
  String get name_expl => "The name under which the horse is known";
  String get next => "Next";
  String get out_of => "out of";
  String get previous => "previous";
  String get race => "Race";
  String get sportsname => "Sportsname";
  String get sportsname_expl => "The name used in competitions";
  String get stallion => "Stallion";
  String get title => "Horse Pass";
  String get ueln => "UELN";
  String get unknown => "Unknown";
  String get westfalian => "Westfalian";
  String years_old(String age) => "$age years old";
  String years_old_female(String age) => "$age years old";
  String years_old_male(String age) => "$age years old";
}

class $de extends S {
  const $de();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get color => "Farbe";
  @override
  String get gender => "Geschlecht";
  @override
  String get title => "Pferdepass";
  @override
  String get stallion => "Hengst";
  @override
  String get unknown => "Unbekannt";
  @override
  String get gelding => "Wallach";
  @override
  String get by => "von";
  @override
  String get sportsname => "Sportname";
  @override
  String get holsteinian => "Holsteiner";
  @override
  String get hannoveranian => "Hannoveraner";
  @override
  String get westfalian => "Westfale";
  @override
  String get ueln => "Lebensnummer";
  @override
  String get breedname => "Zuchtname";
  @override
  String get race => "Rasse";
  @override
  String get black => "Schwarz";
  @override
  String get dateOfBirth => "Geburtsdatum";
  @override
  String get brown => "Braun";
  @override
  String get chestnut => "Fuchs";
  @override
  String get grey => "Schimmel";
  @override
  String get mare => "Stute";
  @override
  String get name => "Name";
  @override
  String get out_of => "aus der";
  @override
  String years_old(String age) => "$age Jahre alter";
  @override
  String years_old_male(String age) => "$age Jahre alter";
  @override
  String years_old_female(String age) => "$age Jahre alte";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("de", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "de":
          return SynchronousFuture<S>(const $de());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
